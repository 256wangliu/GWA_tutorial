module load plink
module load R
cd ~/TutorialGWAs/Simulation

# select CEU only

plink --bfile HapMap_3_r3_12 --keep CEU_ind.txt --make-bed --out Hapmap_1

# I will strongly reduce the number of SNPs so that data can be handled better

plink --bfile Hapmap_1 --recode --out Hapmap_2
plink --file Hapmap_2 --indep 100 5 1.1
plink --file Hapmap_2 --extract plink.prune.in --recode12 --out Hapmap_3


###############################
# simulation 1
# simulate a phenotype that is associated with SNPs

R
ped<-read.table(file="Hapmap_3.ped",header=FALSE)
ethnicity<-read.table(file="pops_HapMap_3_r3",header=TRUE)
data<-merge(ped,ethnicity,by.x=2,by.y=2)
map<-read.table(file="Hapmap_3.map",header=FALSE)
nsnps<-nrow(map)

# determine whether a snps has an effect or not
effectsizesnp1<-matrix(,nsnps,1)
for (i in 1:nsnps)
{
effectsizesnp1[i,]<-rbinom(1,1,0.0001)
}

write.table(effectsizesnp1,file="effectsizesnps.txt",row.names=FALSE,col.names=FALSE,quote=FALSE)

# make a list with the marker names of the snps that have an effect
map2<-map[,2]
map_split<-split(map2,effectsizesnp1[,1])
write.table(map_split$`1`,file="snpswitheffect.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
q()
n

# within plink, select the SNPs which have an effect
plink --file Hapmap_3 --extract snpswitheffect.txt --recode --out Hapmap_4

# simulate phenotype which is affected by SNPs
# read in new ped file
R
ped2<-read.table(file="Hapmap_4.ped",header=FALSE)
ethnicity<-read.table(file="pops_HapMap_3_r3",header=TRUE)
data<-merge(ped2,ethnicity,by.x=2,by.y=2)
map2<-read.table(file="Hapmap_4.map",header=FALSE)
nsnps<-nrow(map2)

# determine effect size
effectsizesnp<-matrix(,nsnps,1)
for (i in 1:nsnps)
{
effectsizesnp[i,]<-runif(1,400,400)
}

effectsize<-matrix(,nsnps*2,1)
for (j in 1:(nsnps*2))
{
m=round((j/2)+0.1)
effectsize[j,]<-effectsizesnp[m,]
}

write.table(effectsize,file="effectsizesnps.txt",row.names=FALSE,col.names=FALSE,quote=FALSE)

error<-matrix(c(rnorm(nrow(data),100,10)),nrow(data),1)
phenotypesnps<-matrix(c(rep(0,nrow(data))),nrow(data),)
for (i in 1:(nrow(data)))
{
for (j in 1:(nsnps*2))
{
phenotypesnps[i,]<-phenotypesnps[i,]+data[i,(j+6)]*effectsize[j,]
}
phenotypesnps[i,]<-phenotypesnps[i,]+error[i,]
}


mean(split(phenotypesnps,data[,7])$'1')
mean(split(phenotypesnps,data[,7])$'2')

# estimate beta's (check simulation)
xnam <- paste("V", 7:(7+1+(nsnps-1)*2), sep="")
fmla <- as.formula(paste("as.numeric(phenotypesnps[,1])~", paste(xnam, collapse= "+")))
glm<-glm(fmla,data=data)
summary(glm)

phenotype<-cbind(as.character(data[,2]),as.character(data[,1]),phenotypesnps)
write.table(phenotype,file="simpheno2.txt",row.names=FALSE,col.names=FALSE,quote=FALSE)
q()
n

###############################
# analyze simulated data and make QQ plot 
# no correction for population stratification

plink --file Hapmap_3 --pheno simpheno2.txt --linear --out plink_assoc
#plink --file Hapmap_4 --pheno simpheno2.txt --linear --out plink_assoc


plink --file Hapmap_3 --pheno simpheno2.txt --linear --adjust --out plinkassocadjust
#plink --file Hapmap_4 --pheno simpheno2.txt --linear --adjust --out plinkassocadjust

# make manhattan and QQ plot

export R_LIBS=~/rpackages:$R_LIBS
module load R
wget http://cran.r-project.org/src/contrib/qqman_0.1.2.tar.gz
R CMD INSTALL -l $HOME/rpackages qqman_0.1.2.tar.gz

R
library(qqman)
data<-read.table (file="plink_assoc.assoc.linear",header=TRUE)
select<-c(2,1,3,9)
data2<-data[,select]
bitmap(file="manhattan_assoc_unadjusted.tif",type="tifflzw",res=1200)
head(subset(data2, select=c(SNP, CHR, BP, P)))
manhattan(data2)
dev.off()

bitmap(file="qq_assoc_unadjusted.tif",type="tifflzw",res=1200)
qq(data2[,4])
dev.off()
q()
n


###############################
# simulation 2
# simulate a binary phenotype based on the quantitative phenotype of simulation 1
# these simulated data can be used for the QC

R
phenotype<-read.table(file="simpheno2.txt",header=FALSE)
phenotypedich<-phenotype
median<-median(phenotype[,3])
for (i in 1:nrow(phenotype))
{
if(phenotype[i,3]<median) {phenotypedich[i,3]=1} else
phenotypedich[i,3]=2
}
write.table(phenotypedich,file="simpheno_forQC.txt",row.names=FALSE,col.names=FALSE,quote=FALSE)
q()
n
