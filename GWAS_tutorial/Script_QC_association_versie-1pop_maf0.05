#PBS -lnodes=1:cores16
#PBS -lwalltime=03:00:00

cd $TMPDIR
scp /home/ederks/TutorialGWAs/test_3_AM/test_enkele_pop/enkele_pop_maf_0.05 .

#dit is alleen om het te runnen gaat weg uit echte versie.

################ Explanation of the script  ##########################

# opgeschoonde versie alle R scripjes in een los Rscript zodat het in een keer te runnen is
#module plink/R load staat nog in deze versie zodat het gerund kan worden 

# Change to directory with your files. Note, specify own information inside the curly brackets: cd $HOME/{user}/{path/folder containing your files}

# This tutorial uses freely available HapMap data: hapmap3_r3_b36_fwd.consensus.qc, (with a binary outcome measure simulated by us, and referred to as HapMap_3_r3_1). This data can be downloaded from http://hapmap.ncbi.nlm.nih.gov/downloads/genotypes/2010-05_phaseIII/plink_format/# To run all steps of the script it is necessary to also download all R scripts (also downloadable from the github page), the Rscripts include comments which explain how the scripts work.
# This script can also be used for your own data analysis, to use it as such, replace the name of the HapMap file with the name of your own data file. 
# Furthermore, this script is based on a binary outcome measure, for quantitative outcome measure adaptation have to be made.

# Note, most GWAS studies are performed on an ethnic homogenous population, in which population outliers are removed. The HapMap data this tutorial uses contains muliple populations from 3 distinct ethnic groups, Which makes it problematic for analysis.
# Therefore we have chosen to conduct the QC and association analyses on one population, further explained below.

############ prepatation data analysis ###############

#komt dus niet in officiele script
module load R
module load plink2

##download data: map, ped, and population file
#map:
wget http://hapmap.ncbi.nlm.nih.gov/downloads/genotypes/2010-05_phaseIII/plink_format/hapmap3_r3_b36_fwd.consensus.qc.poly.map.gz 
#ped:
wget http://hapmap.ncbi.nlm.nih.gov/downloads/genotypes/2010-05_phaseIII/plink_format/hapmap3_r3_b36_fwd.consensus.qc.poly.ped.gz 
#pop
wget http://hapmap.ncbi.nlm.nih.gov/downloads/genotypes/2010-05_phaseIII/relationships_w_pops_041510.txt

# unpack the files:
gunzip hapmap3_r3_b36_fwd.consensus.qc.poly.ped.gz
gunzip hapmap3_r3_b36_fwd.consensus.qc.poly.map.gz

# convert data and rename:
plink --file hapmap3_r3_b36_fwd.consensus.qc.poly --make-bed --out HapMap_3_r3
mv relationships_w_pops_041510.txt pops_HapMap_3_r3

# creating HapMap_3_r3_1(the file to start data analysis with) = Hapmap data (using only one population (CEU)) + simulated phenotype  
grep "CEU" pops_HapMap_3_r3 | awk '{print$1,$2}' > CEU_ind.txt
plink --bfile HapMap_3_r3 --keep CEU_ind.txt --make-bed --out HapMap_3_r3_1
plink --bfile HapMap_3_r3_1 --pheno simpheno_forQC.txt --make-bed --out HapMap_3_r3_1


##############################################################
############### START ANALISIS ###############################
##############################################################

### Step 1 ### 

# investigate missingness per individual and per SNP and make histograms

plink --bfile HapMap_3_r3_1 --missing    # output: plink.imiss and plink.lmiss 
Rscript --no-save hist_miss.R

# delete SNPs and individuals with high levels of missingness, explanation of this and all following steps can be found in table 1.

# delete SNPs with missingness>0.2
plink --bfile HapMap_3_r3_1 --geno 0.2 --make-bed --out HapMap_3_r3_2

# delete individuals with missingness>0.2
plink --bfile HapMap_3_r3_2 --mind 0.2 --make-bed --out HapMap_3_r3_3

# delete SNPs with missingness>0.02
plink --bfile HapMap_3_r3_3 --geno 0.02 --make-bed --out HapMap_3_r3_4

# delete individuals with missingness>0.02
plink --bfile HapMap_3_r3_4 --mind 0.02 --make-bed --out HapMap_3_r3_5

###################################################################
### Step2 ####

# Check for sex discrepancy
# Subjects who were a priori determined as females must have a F value of <0.2, and subjects who were a priori determined as males must have a F value >0.8
# subject who do not fulfill these requirements are flagged "PROBLEM"by PLINK

plink --bfile HapMap_3_r3_5 --check-sex 

# Make plots to visualize the  sexcheck results
Rscript --no-save gender_check.R

# These checks indicate one woman with a sex discrepancy, F value of 0.99. (When using other datasets often a few discrepancies will be found). 

# The following two scripts can be used to deal with individuals who have sex discrepancy .
# Note, please use one of the two options to generate the file hapmap_r23a_6, which we will use the next step

# 1) delete individuals with sex discrepancy
grep "PROBLEM" plink.sexcheck| awk '{print$1,$2}'> sex_descrepancy.txt #generates list of individuals with status PROBLEM
plink --bfile HapMap_3_r3_5 --remove sex_descrepancy.txt --make-bed --out HapMap_3_r3_6 # removes individuals from previous command

# 2) impute-sex
#plink --bfile HapMap_3_r3_5 --impute-sex --make-bed --out HapMap_3_r3_6


	
###################################################
### Step 3 ### 

# generate bfile with  autosomal SNPs only and delete SNPs with low minor allele frequency

# select autosomal SNPs 
awk '{ if ($1 >= 1 && $1 <= 22) print $2 }' HapMap_3_r3_6.bim > snp_1_22.txt
plink --bfile HapMap_3_r3_6 --extract snp_1_22.txt --make-bed --out HapMap_3_r3_7

# make plot of minor allele frequency (MAF) distribution
plink --bfile HapMap_3_r3_7 --freq --out MAF_check
Rscript --no-save MAF_check.R

# remove SNPs with low frequency
plink --bfile HapMap_3_r3_7 --maf 0.05 --make-bed --out HapMap_3_r3_8
# 1073226 SNPs are left
# A conventional MAF threshold for a regular GWAS is between 0.01 or 0.05


####################################################
### Step 4 ###

# delete SNPs which are not in HWE
# check histribution HWE p-values of all SNPs

plink --bfile HapMap_3_r3_8 --hardy
# Selecting SNPs with HWE p-value below 0.00001, required for one of the two plot generated by the next Rscript, allows to zoom in on strongly deviating SNPs 
awk '{ if ($9 <0.00001) print $0 }' plink.hwe>plinkzoomhwe.hwe
Rscript --no-save hwe.R

# first we use a stringent HWE on controls
plink --bfile HapMap_3_r3_8 --hwe 1e-6 --make-bed --out hwe_controls

# Then we set a HWE threshold which filters out only SNP extremly deviating from HWE 
# This second step involving HWE focusses only on the cases because in the controls all SNPs with a HWE p-value < hwe 1e-6 were already removed
plink --bfile hwe_controls --hwe 1e-10 --hwe-all --make-bed --out HapMap_3_r3_9


############################################################
### step 5 ###

# remove individuals with a heterozygosity rate deviating more than 3 sd from the mean
# make a plot of the distribution of the heterozygosity rate of your subjects.

# checks for heterozygosity are performed on a set of SNPs which are not highly correlated
# to generate such a SNP list, we exclude high inversion regions (inversion.txt) and prune the SNPs using the command --indep-pairwise’
# the parameters ‘50 5 0.2’ stand for the window size, the number of SNPs to shift the window at each step and the multiple correlation coefficient for a SNP being regressed on all other SNPs simultaneously

plink --bfile HapMap_3_r3_9 --exclude inversion.txt --range --indep-pairwise 50 5 0.2 --out indepSNP
# Note, don't delete the file indepSNP.prune.in, we will use this file in later steps of the tutorial

plink --bfile HapMap_3_r3_9 --extract indepSNP.prune.in --het --out R_check

#plot of the heterozygosity rate distribution
Rscript --no-save check_heterozygosity_rate.R

# The following code generates a list of individuals who deviate more than 3 standard deviations from the heterozygosity rate mean
# for data manipulation we recommend using UNIX. However, when performing statistical calculations R might be more convenient, hence the use of the R script for this step
Rscript --no-save heterozygosity_outliers_list.R

# output: fail-het-qc.txt
# in the  HapMap data this list will contain 2 individuals (i.e., two individuals have a heterozygosity rate deviating more than 3 SD's form the mean)

# adapt the file to make it compatible for plink.
sed 's/"// g' fail-het-qc.txt | awk '{print$1, $2}'> het_fail_ind.txt

# remove the individuals in the list generated by the previous command from the dataset (when following this protocol strictly no subject will be removed from the dataset)
plink --bfile HapMap_3_r3_9 --remove het_fail_ind.txt --make-bed --out HapMap_3_r3_10


############################################################
### step 6 ###

# It is essenttial to check in all datasets for cryptic relatedness
# Assuming a random population sample we want to exclude all individuals above the pihat theshold of 0.2

# check for individuals with a pihat > 0.2
plink --bfile HapMap_3_r3_10 --extract indepSNP.prune.in --genome --min 0.2 --out pihat_min0.2

# zoom in on potential child offspring relationship
awk '{ if ($8 >0.9) print $0 }' pihat_min0.2.genome>zoom_pihat.genome

# make plot to assess the type of relationship
Rscript --no-save Retatedness.R

# the generated plots show a considerable amount of related individuals (parent-offspring=PO in plot) in the Hapmap data which is expected since that was how the dataset was constructed.
# Normally, family based data should be analyzed as such. In this tutorial, for demonstrative purposes, we treat the relatedness as cryptic relatedness in a random population sample.
# Therefore, we aim to remove all relatedness from this dataset.
# First to demonstrate that the majority of the relatedness was due to parent-offspring we only include founders (individuals without parents in the dataset)

plink --bfile HapMap_3_r3_10 --filter-founders --make-bed --out HapMap_3_r3_11

# now we will look again for individuals with a pihat >0.2
plink --bfile HapMap_3_r3_11 --extract indepSNP.prune.in --genome --min 0.2 --out pihat_min0.2_in_founders
# the file pihat_min0.2_in_founders.genome shows that after exclusion of all non-founders there is only 1 individual pair with a pihat greater than 0.2 remains in the HapMap data
# This is a full sib or DZ twin pair based on the Z values. Noteworthy, they were not given the same family identity (FID) in the HapMap data.

# select FID and IID of all founder individuals with a Pihat above 0.2 
awk '{print$1,$2}' pihat_min0.2_in_founders.genome> remove_Pihat_above_0.2_founders_only

# remove header
sed '1d' remove_Pihat_above_0.2_founders_only > remove_Pihat_above_0.2_founders_only_2

# remove individuals with a pihat > 0.2
plink --bfile HapMap_3_r3_11 --remove remove_Pihat_above_0.2_founders_only_2 --make-bed --out HapMap_3_r3_12


###################################################################
### step 7 ####

# check for population stratification
# this part of of the population stratification only contains the most basic script, more elaborate scripts concerning this subject con be found in seperate parts of this tutorial
# the current files can be a starting point in using those scripts

plink --bfile HapMap_3_r3_12 --genome --out genome_strat
plink --bfile HapMap_3_r3_12 --read-genome genome_strat.genome --cluster --mds-plot 10 --out mds

Rscript --no-save plot_mds.R
# based on this plot and the knowledge that this dataset only includes individuals selcted for being EUR we recommend not to remove subjects.
# note, we use the file mds.mds in a following step to use as a covariate file

# However, if you need to remove population stratification outliers from your own sample you can use the following script
# Note, you have to adapt the $4 and $5 thresholda such that it fits your own dataset based on the generated plots, when you are not using the HapMap dataset
awk '{ if ($4 >0.02 || $5 >0.03) print $0 }' mds.mds | awk '{print$1,$2} '| sed '1d' > pop_strat_outliers.txt
plink --bfile HapMap_3_r3_12 --remove pop_strat_outliers.txt --make-bed --out HapMap_without_pop_strat_outliers


# The bfile HapMap_3_r3_12 has underwent all the QC steps and will be used for association analysis.


###########################################################
### association analyses ###

# This tutorial used a simulated binary/dichotomous trait, for continuation of this tutorial only the methods for binary trait are required.

# Binary traits
#assoc
plink --bfile HapMap_3_r3_12 --assoc --out assoc_results

# logistic 
# we will be using principal components as covariates in this logistic analysis. For this we adapt the mds.mds file to suit the covariate file format
awk '{print$1, $2, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13}' mds.mds > PCA.txt

plink --bfile HapMap_3_r3_12 --covar PCA.txt --logistic --hide-covar --out logistic_results
# Note, we use the option hide covar to only show the additative results of the SNPs in the output file

#remove NA values, can give problems generating plots in later steps
awk '!/'NA'/' logistic_results.assoc.logistic > logistic_results.assoc_2.logistic



## example script, for illustrative puposes 
## permutation
#Plink --bfile HapMap_3_r3_12 --logistic -mperm 10000000  --out 10M_perm_result
# Note, in case of a quantitative outcome measure logistic should be replaced by linear. Additionally --assoc in also possible to use, however, this does not allow the use of covariates.


##############################################################

# Quantitative traits:
## example scripts, for illustrative puposes. Note, this tutorial does not offers quantitative data


# assoc
#plink --bfile quantitative_Qced_data --assoc --out assoc_results

# linear
#Plink --bfile quantitative_Qced_data --covar PC_components --linear  out logistic_resutls


#################################################################

# multiple testing 
#adjust
plink --bfile HapMap_3_r3_12 -assoc --adjust --out adjusted_assoc_results

#####################################################################

# make Manhattan and QQ plots plot

# these scripts assume R >= 3.0.0
# If you changed the names of the output files, please assign that name also to these Rscripts, otherwise they won't run.

Rscript --no-save Manhattan_plot.R
Rscript --no-save QQ_plot.R
# these scripts will take up some computational time, it might be convinient to create jobs

# Als ze niet met LISA werken weet ik niet hoe ik hier voorbeeld script voor kan geven (kunnen LISA jobscript ook uploaden).
# om mijn LISA job te runnen
#(qsub job_QQ_en_manhattan)



######
#LET OP, vanwege vele SNPs worden de PDFjes enorm, elk punt word apart geprint. Kost mijn computer een minuut om het figuur te generen, en loopt soms vast
#Met jpeg is dit probleem er niet. 


scp * /home/ederks/TutorialGWAs/test_3_AM/test_enkele_pop/